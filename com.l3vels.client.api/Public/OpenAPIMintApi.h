/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * OpenAPI spec version: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIMintApi
{
public:
	OpenAPIMintApi();
	~OpenAPIMintApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AirdropAssetToPlayerRequest;
	class AirdropAssetToPlayerResponse;
	class AwardAssetToPlayerRequest;
	class AwardAssetToPlayerResponse;
	class BatchMintAssetByPlayerRequest;
	class BatchMintAssetByPlayerResponse;
	class MintAssetRequest;
	class MintAssetResponse;
	class MintAssetByPlayerRequest;
	class MintAssetByPlayerResponse;
	class MintBatchAssetRequest;
	class MintBatchAssetResponse;
	
    DECLARE_DELEGATE_OneParam(FAirdropAssetToPlayerDelegate, const AirdropAssetToPlayerResponse&);
    DECLARE_DELEGATE_OneParam(FAwardAssetToPlayerDelegate, const AwardAssetToPlayerResponse&);
    DECLARE_DELEGATE_OneParam(FBatchMintAssetByPlayerDelegate, const BatchMintAssetByPlayerResponse&);
    DECLARE_DELEGATE_OneParam(FMintAssetDelegate, const MintAssetResponse&);
    DECLARE_DELEGATE_OneParam(FMintAssetByPlayerDelegate, const MintAssetByPlayerResponse&);
    DECLARE_DELEGATE_OneParam(FMintBatchAssetDelegate, const MintBatchAssetResponse&);
    
    FHttpRequestPtr AirdropAssetToPlayer(const AirdropAssetToPlayerRequest& Request, const FAirdropAssetToPlayerDelegate& Delegate = FAirdropAssetToPlayerDelegate()) const;
    FHttpRequestPtr AwardAssetToPlayer(const AwardAssetToPlayerRequest& Request, const FAwardAssetToPlayerDelegate& Delegate = FAwardAssetToPlayerDelegate()) const;
    FHttpRequestPtr BatchMintAssetByPlayer(const BatchMintAssetByPlayerRequest& Request, const FBatchMintAssetByPlayerDelegate& Delegate = FBatchMintAssetByPlayerDelegate()) const;
    FHttpRequestPtr MintAsset(const MintAssetRequest& Request, const FMintAssetDelegate& Delegate = FMintAssetDelegate()) const;
    FHttpRequestPtr MintAssetByPlayer(const MintAssetByPlayerRequest& Request, const FMintAssetByPlayerDelegate& Delegate = FMintAssetByPlayerDelegate()) const;
    FHttpRequestPtr MintBatchAsset(const MintBatchAssetRequest& Request, const FMintBatchAssetDelegate& Delegate = FMintBatchAssetDelegate()) const;
    
private:
    void OnAirdropAssetToPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAirdropAssetToPlayerDelegate Delegate) const;
    void OnAwardAssetToPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAwardAssetToPlayerDelegate Delegate) const;
    void OnBatchMintAssetByPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBatchMintAssetByPlayerDelegate Delegate) const;
    void OnMintAssetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMintAssetDelegate Delegate) const;
    void OnMintAssetByPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMintAssetByPlayerDelegate Delegate) const;
    void OnMintBatchAssetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMintBatchAssetDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
