/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * OpenAPI spec version: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAsset.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIAsset::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("token_id")); WriteJsonValue(Writer, TokenId);
	Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name);
	Writer->WriteIdentifierPrefix(TEXT("parent_id")); WriteJsonValue(Writer, ParentId);
	Writer->WriteIdentifierPrefix(TEXT("properties")); WriteJsonValue(Writer, Properties);
	Writer->WriteIdentifierPrefix(TEXT("attributes")); WriteJsonValue(Writer, Attributes);
	Writer->WriteIdentifierPrefix(TEXT("achievements")); WriteJsonValue(Writer, Achievements);
	Writer->WriteIdentifierPrefix(TEXT("rewards")); WriteJsonValue(Writer, Rewards);
	Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description);
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	Writer->WriteIdentifierPrefix(TEXT("price")); WriteJsonValue(Writer, Price);
	Writer->WriteIdentifierPrefix(TEXT("supply")); WriteJsonValue(Writer, Supply);
	Writer->WriteIdentifierPrefix(TEXT("minted_amount")); WriteJsonValue(Writer, MintedAmount);
	Writer->WriteIdentifierPrefix(TEXT("asset_type")); WriteJsonValue(Writer, AssetType);
	Writer->WriteIdentifierPrefix(TEXT("asset_url")); WriteJsonValue(Writer, AssetUrl);
	Writer->WriteIdentifierPrefix(TEXT("medias")); WriteJsonValue(Writer, Medias);
	Writer->WriteIdentifierPrefix(TEXT("main_media")); WriteJsonValue(Writer, MainMedia);
	Writer->WriteIdentifierPrefix(TEXT("account_id")); WriteJsonValue(Writer, AccountId);
	Writer->WriteIdentifierPrefix(TEXT("game_id")); WriteJsonValue(Writer, GameId);
	Writer->WriteIdentifierPrefix(TEXT("collection_id")); WriteJsonValue(Writer, CollectionId);
	Writer->WriteIdentifierPrefix(TEXT("created_on")); WriteJsonValue(Writer, CreatedOn);
	Writer->WriteIdentifierPrefix(TEXT("modified_on")); WriteJsonValue(Writer, ModifiedOn);
	Writer->WriteIdentifierPrefix(TEXT("created_by")); WriteJsonValue(Writer, CreatedBy);
	Writer->WriteIdentifierPrefix(TEXT("modified_by")); WriteJsonValue(Writer, ModifiedBy);
	Writer->WriteObjectEnd();
}

bool OpenAPIAsset::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("token_id"), TokenId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("parent_id"), ParentId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("properties"), Properties);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("attributes"), Attributes);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("achievements"), Achievements);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("rewards"), Rewards);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("price"), Price);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("supply"), Supply);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("minted_amount"), MintedAmount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("asset_type"), AssetType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("asset_url"), AssetUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("medias"), Medias);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("main_media"), MainMedia);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("account_id"), AccountId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("game_id"), GameId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("collection_id"), CollectionId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_on"), CreatedOn);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("modified_on"), ModifiedOn);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_by"), CreatedBy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("modified_by"), ModifiedBy);

	return ParseSuccess;
}

}
