/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * OpenAPI spec version: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPITransaction.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPITransaction::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	Writer->WriteIdentifierPrefix(TEXT("from")); WriteJsonValue(Writer, From);
	Writer->WriteIdentifierPrefix(TEXT("to")); WriteJsonValue(Writer, To);
	Writer->WriteIdentifierPrefix(TEXT("contract_id")); WriteJsonValue(Writer, ContractId);
	Writer->WriteIdentifierPrefix(TEXT("contract_address")); WriteJsonValue(Writer, ContractAddress);
	Writer->WriteIdentifierPrefix(TEXT("blockchain")); WriteJsonValue(Writer, Blockchain);
	Writer->WriteIdentifierPrefix(TEXT("chain_name")); WriteJsonValue(Writer, ChainName);
	Writer->WriteIdentifierPrefix(TEXT("chain_id")); WriteJsonValue(Writer, ChainId);
	Writer->WriteIdentifierPrefix(TEXT("environment")); WriteJsonValue(Writer, Environment);
	Writer->WriteIdentifierPrefix(TEXT("transaction_hash")); WriteJsonValue(Writer, TransactionHash);
	Writer->WriteIdentifierPrefix(TEXT("block_number")); WriteJsonValue(Writer, BlockNumber);
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	Writer->WriteIdentifierPrefix(TEXT("method")); WriteJsonValue(Writer, Method);
	Writer->WriteIdentifierPrefix(TEXT("events")); WriteJsonValue(Writer, Events);
	Writer->WriteIdentifierPrefix(TEXT("game_id")); WriteJsonValue(Writer, GameId);
	Writer->WriteIdentifierPrefix(TEXT("collection_id")); WriteJsonValue(Writer, CollectionId);
	Writer->WriteIdentifierPrefix(TEXT("account_id")); WriteJsonValue(Writer, AccountId);
	Writer->WriteIdentifierPrefix(TEXT("created_on")); WriteJsonValue(Writer, CreatedOn);
	Writer->WriteIdentifierPrefix(TEXT("modified_on")); WriteJsonValue(Writer, ModifiedOn);
	Writer->WriteIdentifierPrefix(TEXT("created_by")); WriteJsonValue(Writer, CreatedBy);
	Writer->WriteIdentifierPrefix(TEXT("modified_by")); WriteJsonValue(Writer, ModifiedBy);
	Writer->WriteObjectEnd();
}

bool OpenAPITransaction::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("from"), From);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("to"), To);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract_id"), ContractId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract_address"), ContractAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blockchain"), Blockchain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chain_name"), ChainName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chain_id"), ChainId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("environment"), Environment);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transaction_hash"), TransactionHash);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("block_number"), BlockNumber);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("method"), Method);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("events"), Events);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("game_id"), GameId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("collection_id"), CollectionId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("account_id"), AccountId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_on"), CreatedOn);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("modified_on"), ModifiedOn);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_by"), CreatedBy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("modified_by"), ModifiedBy);

	return ParseSuccess;
}

}
