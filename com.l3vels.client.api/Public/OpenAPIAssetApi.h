/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * OpenAPI spec version: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIAssetApi
{
public:
	OpenAPIAssetApi();
	~OpenAPIAssetApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CountByGameRequest;
	class CountByGameResponse;
	class CreateAssetRequest;
	class CreateAssetResponse;
	class GetAssetByIdRequest;
	class GetAssetByIdResponse;
	class GetAssetsRequest;
	class GetAssetsResponse;
	class UpdateAssetRequest;
	class UpdateAssetResponse;
	
    DECLARE_DELEGATE_OneParam(FCountByGameDelegate, const CountByGameResponse&);
    DECLARE_DELEGATE_OneParam(FCreateAssetDelegate, const CreateAssetResponse&);
    DECLARE_DELEGATE_OneParam(FGetAssetByIdDelegate, const GetAssetByIdResponse&);
    DECLARE_DELEGATE_OneParam(FGetAssetsDelegate, const GetAssetsResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateAssetDelegate, const UpdateAssetResponse&);
    
    FHttpRequestPtr CountByGame(const CountByGameRequest& Request, const FCountByGameDelegate& Delegate = FCountByGameDelegate()) const;
    FHttpRequestPtr CreateAsset(const CreateAssetRequest& Request, const FCreateAssetDelegate& Delegate = FCreateAssetDelegate()) const;
    FHttpRequestPtr GetAssetById(const GetAssetByIdRequest& Request, const FGetAssetByIdDelegate& Delegate = FGetAssetByIdDelegate()) const;
    FHttpRequestPtr GetAssets(const GetAssetsRequest& Request, const FGetAssetsDelegate& Delegate = FGetAssetsDelegate()) const;
    FHttpRequestPtr UpdateAsset(const UpdateAssetRequest& Request, const FUpdateAssetDelegate& Delegate = FUpdateAssetDelegate()) const;
    
private:
    void OnCountByGameResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCountByGameDelegate Delegate) const;
    void OnCreateAssetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateAssetDelegate Delegate) const;
    void OnGetAssetByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAssetByIdDelegate Delegate) const;
    void OnGetAssetsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAssetsDelegate Delegate) const;
    void OnUpdateAssetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateAssetDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
