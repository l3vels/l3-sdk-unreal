/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * OpenAPI spec version: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPICollectionApi
{
public:
	OpenAPICollectionApi();
	~OpenAPICollectionApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CollectionControllerCreateCollectionRequest;
	class CollectionControllerCreateCollectionResponse;
	class CountCollectionsByGameIdRequest;
	class CountCollectionsByGameIdResponse;
	class GetCollectionByIdRequest;
	class GetCollectionByIdResponse;
	class GetCollectionsRequest;
	class GetCollectionsResponse;
	
    DECLARE_DELEGATE_OneParam(FCollectionControllerCreateCollectionDelegate, const CollectionControllerCreateCollectionResponse&);
    DECLARE_DELEGATE_OneParam(FCountCollectionsByGameIdDelegate, const CountCollectionsByGameIdResponse&);
    DECLARE_DELEGATE_OneParam(FGetCollectionByIdDelegate, const GetCollectionByIdResponse&);
    DECLARE_DELEGATE_OneParam(FGetCollectionsDelegate, const GetCollectionsResponse&);
    
    FHttpRequestPtr CollectionControllerCreateCollection(const CollectionControllerCreateCollectionRequest& Request, const FCollectionControllerCreateCollectionDelegate& Delegate = FCollectionControllerCreateCollectionDelegate()) const;
    FHttpRequestPtr CountCollectionsByGameId(const CountCollectionsByGameIdRequest& Request, const FCountCollectionsByGameIdDelegate& Delegate = FCountCollectionsByGameIdDelegate()) const;
    FHttpRequestPtr GetCollectionById(const GetCollectionByIdRequest& Request, const FGetCollectionByIdDelegate& Delegate = FGetCollectionByIdDelegate()) const;
    FHttpRequestPtr GetCollections(const GetCollectionsRequest& Request, const FGetCollectionsDelegate& Delegate = FGetCollectionsDelegate()) const;
    
private:
    void OnCollectionControllerCreateCollectionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCollectionControllerCreateCollectionDelegate Delegate) const;
    void OnCountCollectionsByGameIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCountCollectionsByGameIdDelegate Delegate) const;
    void OnGetCollectionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCollectionByIdDelegate Delegate) const;
    void OnGetCollectionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCollectionsDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
