/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * OpenAPI spec version: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIPlayerApi.h"

#include "com.l3vels.client.model/OpenAPICreatePlayerDto.h"
#include "com.l3vels.client.model/OpenAPIPlayer.h"
#include "com.l3vels.client.model/OpenAPIPlayerAsset.h"

namespace OpenAPI
{

/* Retrieve player asset by ID
 *
 * Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
*/
class OPENAPI_API OpenAPIPlayerApi::PlayerAssetControllerPlayerAssetByIdRequest : public Request
{
public:
    virtual ~PlayerAssetControllerPlayerAssetByIdRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	FString Id;
	FString ProjectId;
};

class OPENAPI_API OpenAPIPlayerApi::PlayerAssetControllerPlayerAssetByIdResponse : public Response
{
public:
    virtual ~PlayerAssetControllerPlayerAssetByIdResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPlayerAsset Content;
};

/* Retrieve player assets
 *
 * This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
*/
class OPENAPI_API OpenAPIPlayerApi::PlayerAssetControllerPlayerAssetsRequest : public Request
{
public:
    virtual ~PlayerAssetControllerPlayerAssetsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	/* Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. */
	FString ProjectId;
	/* Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. */
	TOptional<FString> AssetId;
	/* Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. */
	TOptional<FString> PlayerId;
	/* Player asset field to sort by. You can sort by name, created_on and etc. */
	TOptional<FString> Sort;
	/* Sort order (ASC for ascending or DESC for descending) */
	TOptional<FString> Order;
	/* Number of player assets to return per page */
	TOptional<double> Limit;
	/* Page number */
	TOptional<double> Page;
};

class OPENAPI_API OpenAPIPlayerApi::PlayerAssetControllerPlayerAssetsResponse : public Response
{
public:
    virtual ~PlayerAssetControllerPlayerAssetsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<OpenAPIPlayerAsset> Content;
};

/* Create new player
 *
 * Create new player for game/project. Example: Create new player Jack in game Call of Duty.
*/
class OPENAPI_API OpenAPIPlayerApi::PlayerControllerCreatePlayerRequest : public Request
{
public:
    virtual ~PlayerControllerCreatePlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	OpenAPICreatePlayerDto OpenAPICreatePlayerDto;
};

class OPENAPI_API OpenAPIPlayerApi::PlayerControllerCreatePlayerResponse : public Response
{
public:
    virtual ~PlayerControllerCreatePlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPlayer Content;
};

/* Delete a Player
 *
 * This API method allows developers to delete a Player by providing the ID of the Player. Once deleted, the Player and all associated assets will be removed from the system.
*/
class OPENAPI_API OpenAPIPlayerApi::PlayerControllerDeletePlayerRequest : public Request
{
public:
    virtual ~PlayerControllerDeletePlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
};

class OPENAPI_API OpenAPIPlayerApi::PlayerControllerDeletePlayerResponse : public Response
{
public:
    virtual ~PlayerControllerDeletePlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Retrieve players
 *
 * Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
*/
class OPENAPI_API OpenAPIPlayerApi::PlayerControllerGetPlayersRequest : public Request
{
public:
    virtual ~PlayerControllerGetPlayersRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	/* Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc. */
	FString ProjectId;
	/* Player field to sort by. You can sort by name, created_on and etc. */
	TOptional<FString> Sort;
	/* Sort order (ASC for ascending or DESC for descending) */
	TOptional<FString> Order;
	/* Search player by name */
	TOptional<FString> SearchText;
	/* Number of players to return per page */
	TOptional<double> Limit;
	/* Page number */
	TOptional<double> Page;
};

class OPENAPI_API OpenAPIPlayerApi::PlayerControllerGetPlayersResponse : public Response
{
public:
    virtual ~PlayerControllerGetPlayersResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<OpenAPIPlayer> Content;
};

/* Retrieve player by ID
 *
 * Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
*/
class OPENAPI_API OpenAPIPlayerApi::PlayerControllerPlayerByIdRequest : public Request
{
public:
    virtual ~PlayerControllerPlayerByIdRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	/* Player ID that you created in your game/project. Example: Jack, George, etc. */
	FString Id;
	/* Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc. */
	FString ProjectId;
};

class OPENAPI_API OpenAPIPlayerApi::PlayerControllerPlayerByIdResponse : public Response
{
public:
    virtual ~PlayerControllerPlayerByIdResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPlayer Content;
};

/* Count players
 *
 * Count players in game. Example: count players in game Call of Duty.
*/
class OPENAPI_API OpenAPIPlayerApi::PlayerControllerPlayersCountByGameIdRequest : public Request
{
public:
    virtual ~PlayerControllerPlayersCountByGameIdRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	/* Game Id */
	FString ProjectId;
};

class OPENAPI_API OpenAPIPlayerApi::PlayerControllerPlayersCountByGameIdResponse : public Response
{
public:
    virtual ~PlayerControllerPlayersCountByGameIdResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    double Content;
};

/* Update an existing Player
 *
 * This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
*/
class OPENAPI_API OpenAPIPlayerApi::PlayerControllerUpdatePlayerRequest : public Request
{
public:
    virtual ~PlayerControllerUpdatePlayerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
};

class OPENAPI_API OpenAPIPlayerApi::PlayerControllerUpdatePlayerResponse : public Response
{
public:
    virtual ~PlayerControllerUpdatePlayerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIPlayer Content;
};

}
