/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * OpenAPI spec version: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIPlayerApi
{
public:
	OpenAPIPlayerApi();
	~OpenAPIPlayerApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CountPlayersByGameIdRequest;
	class CountPlayersByGameIdResponse;
	class CreatePlayerRequest;
	class CreatePlayerResponse;
	class GetPlayerAssetByIdRequest;
	class GetPlayerAssetByIdResponse;
	class GetPlayerByIdRequest;
	class GetPlayerByIdResponse;
	class GetPlayersRequest;
	class GetPlayersResponse;
	class PlayerAssetsRequest;
	class PlayerAssetsResponse;
	class UpdatePlayerRequest;
	class UpdatePlayerResponse;
	
    DECLARE_DELEGATE_OneParam(FCountPlayersByGameIdDelegate, const CountPlayersByGameIdResponse&);
    DECLARE_DELEGATE_OneParam(FCreatePlayerDelegate, const CreatePlayerResponse&);
    DECLARE_DELEGATE_OneParam(FGetPlayerAssetByIdDelegate, const GetPlayerAssetByIdResponse&);
    DECLARE_DELEGATE_OneParam(FGetPlayerByIdDelegate, const GetPlayerByIdResponse&);
    DECLARE_DELEGATE_OneParam(FGetPlayersDelegate, const GetPlayersResponse&);
    DECLARE_DELEGATE_OneParam(FPlayerAssetsDelegate, const PlayerAssetsResponse&);
    DECLARE_DELEGATE_OneParam(FUpdatePlayerDelegate, const UpdatePlayerResponse&);
    
    FHttpRequestPtr CountPlayersByGameId(const CountPlayersByGameIdRequest& Request, const FCountPlayersByGameIdDelegate& Delegate = FCountPlayersByGameIdDelegate()) const;
    FHttpRequestPtr CreatePlayer(const CreatePlayerRequest& Request, const FCreatePlayerDelegate& Delegate = FCreatePlayerDelegate()) const;
    FHttpRequestPtr GetPlayerAssetById(const GetPlayerAssetByIdRequest& Request, const FGetPlayerAssetByIdDelegate& Delegate = FGetPlayerAssetByIdDelegate()) const;
    FHttpRequestPtr GetPlayerById(const GetPlayerByIdRequest& Request, const FGetPlayerByIdDelegate& Delegate = FGetPlayerByIdDelegate()) const;
    FHttpRequestPtr GetPlayers(const GetPlayersRequest& Request, const FGetPlayersDelegate& Delegate = FGetPlayersDelegate()) const;
    FHttpRequestPtr PlayerAssets(const PlayerAssetsRequest& Request, const FPlayerAssetsDelegate& Delegate = FPlayerAssetsDelegate()) const;
    FHttpRequestPtr UpdatePlayer(const UpdatePlayerRequest& Request, const FUpdatePlayerDelegate& Delegate = FUpdatePlayerDelegate()) const;
    
private:
    void OnCountPlayersByGameIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCountPlayersByGameIdDelegate Delegate) const;
    void OnCreatePlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreatePlayerDelegate Delegate) const;
    void OnGetPlayerAssetByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerAssetByIdDelegate Delegate) const;
    void OnGetPlayerByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayerByIdDelegate Delegate) const;
    void OnGetPlayersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPlayersDelegate Delegate) const;
    void OnPlayerAssetsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPlayerAssetsDelegate Delegate) const;
    void OnUpdatePlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdatePlayerDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
