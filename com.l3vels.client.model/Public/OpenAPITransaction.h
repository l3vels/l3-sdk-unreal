/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * OpenAPI spec version: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

/*
 * OpenAPITransaction
 *
 * 
 */
class OPENAPI_API OpenAPITransaction : public Model
{
public:
    virtual ~OpenAPITransaction() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
	void WriteJson(JsonWriter& Writer) const final;

	/* The unique identifier for the transaction entity. */
	FString Id;
	/* Transaction status in Blockchain. Can be pending, success or fail */
	FString Status;
	/* Address of the sender of the transaction. */
	FString From;
	/* Address of the receiver of the transaction. It can be contract address or player address if it is a transfer transaction. */
	FString To;
	/* Contract ID the transaction is associated with. */
	FString ContractId;
	/* Contract address where the transaction happened. */
	FString ContractAddress;
	/* Main blockchain identifier: Ethereum, Polygon, etc. */
	FString Blockchain;
	/* Chain name identifier: Ethereum, Goerli, Sepolia, PolygonPoS, etc. */
	FString ChainName;
	/* Chain ID: 1 for Ethereum, 5 for Goerli, 80001 for Polygon Mumbai, etc. */
	double ChainId;
	/* Chain environment: Testnet, Mainnet, etc. */
	FString Environment;
	/* Unique transaction hash in the blockchain. */
	FString TransactionHash;
	/* Unique block number in the blockchain. */
	double BlockNumber;
	/* Transaction type: Mint, Transfer, Award, Airdrop, etc. */
	FString Type;
	/* Function method name that was called in smart contract */
	FString Method;
	/* List of events that were emitted in the transaction */
	TArray<FString> Events;
	/* The unique identifier of the project that the transaction is associated with. This allows developers to organize their transactions by project and helps with tracking and reporting. */
	FString ProjectId;
	/* The unique identifier of the collection that the transaction is associated with. This allows developers to organize their transactions by project and helps with tracking and reporting. */
	FString CollectionId;
	/* The unique identifier of the account that the transaction belongs to. */
	double AccountId;
	/* The date when the collection was created. */
	FDateTime CreatedOn;
	/* The date when the collection was last modified. */
	FDateTime ModifiedOn;
	/* The Id of the user who created the collection. */
	double CreatedBy;
	/* The Id of the user who last modified the collection. */
	double ModifiedBy;
};

}
