/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * OpenAPI spec version: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIMintApi.h"

#include "com.l3vels.client.model/OpenAPIMintBatchDto.h"
#include "com.l3vels.client.model/OpenAPIMintDto.h"

namespace OpenAPI
{

/* Airdrop asset to player
 *
 * Airdrop asset to player
*/
class OPENAPI_API OpenAPIMintApi::MintControllerAirdropRequest : public Request
{
public:
    virtual ~MintControllerAirdropRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	OpenAPIMintDto OpenAPIMintDto;
};

class OPENAPI_API OpenAPIMintApi::MintControllerAirdropResponse : public Response
{
public:
    virtual ~MintControllerAirdropResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Award asset to player
 *
 * Award asset to player
*/
class OPENAPI_API OpenAPIMintApi::MintControllerAwardRequest : public Request
{
public:
    virtual ~MintControllerAwardRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	OpenAPIMintDto OpenAPIMintDto;
};

class OPENAPI_API OpenAPIMintApi::MintControllerAwardResponse : public Response
{
public:
    virtual ~MintControllerAwardResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Mint asset
 *
 * Mint an asset by admin to player
*/
class OPENAPI_API OpenAPIMintApi::MintControllerMintRequest : public Request
{
public:
    virtual ~MintControllerMintRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	OpenAPIMintDto OpenAPIMintDto;
};

class OPENAPI_API OpenAPIMintApi::MintControllerMintResponse : public Response
{
public:
    virtual ~MintControllerMintResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Batch mint assets
 *
 * Batch mint assets by admin to player
*/
class OPENAPI_API OpenAPIMintApi::MintControllerMintBatchRequest : public Request
{
public:
    virtual ~MintControllerMintBatchRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	OpenAPIMintBatchDto OpenAPIMintBatchDto;
};

class OPENAPI_API OpenAPIMintApi::MintControllerMintBatchResponse : public Response
{
public:
    virtual ~MintControllerMintBatchResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Mint asset by player
 *
 * Mint asset by player. Player must have enough balance to mint.
*/
class OPENAPI_API OpenAPIMintApi::MintControllerPlayerMintRequest : public Request
{
public:
    virtual ~MintControllerPlayerMintRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	OpenAPIMintDto OpenAPIMintDto;
};

class OPENAPI_API OpenAPIMintApi::MintControllerPlayerMintResponse : public Response
{
public:
    virtual ~MintControllerPlayerMintResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

/* Batch mint assets by player
 *
 * Batch mint assets by player. Player must have enough balance to mint.
*/
class OPENAPI_API OpenAPIMintApi::MintControllerPlayerMintBatchRequest : public Request
{
public:
    virtual ~MintControllerPlayerMintBatchRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* API key is associated with multiple projects. Please include it in to use developers API. */
	FString Authorization;
	OpenAPIMintBatchDto OpenAPIMintBatchDto;
};

class OPENAPI_API OpenAPIMintApi::MintControllerPlayerMintBatchResponse : public Response
{
public:
    virtual ~MintControllerPlayerMintBatchResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    
};

}
